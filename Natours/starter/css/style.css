/* for low lever basics like resets, this file is a partial - starts with _ */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /** now we're making all elements inhirit this from body, except body because of the specificity */
  /** it's better to use inheritance the assign things to elements when possible */
  box-sizing: inherit; }

html {
  font-size: 62.5%; }

body {
  box-sizing: border-box; }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0); } }

body {
  /* set all inherited properties */
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* Avoid if animations get shaky and move up a bit because this entire element moves, 
  the backface of this element will be hidden */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary__text--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* animation-delay: 1s; */
    /* animation-iteration-count: 3; */ }
  .heading-primary__text--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out; }

.btn {
  /* when an anchor is selected */
  /* the after pseudoelement adds a virtual element after the selected element */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    /* so the box model works on inline elements, but treated as text */
    display: inline-block;
    border-radius: 10rem;
    /* the transition property has to be in the initial state */
    transition: all .2s;
    /* it needs to be relative to the ::after element can have absolute positioning */
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-0.3rem);
    /* complete black but very little opacity */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      /* trick for fading out */
      opacity: 0; }
  .btn:active {
    transform: translateY(0.1rem);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    /* for a pseudoelement to appear on the page, 
    we need to specify its content (event if empty) and display property property */
    content: "";
    /* we most likely want the display property to be the same */
    display: inline-block;
    /* same size as element */
    height: 100%;
    width: 100%;
    /* should be the same as the btn */
    border-radius: 10rem;
    /* to put it behind the button, so we need to put the position of the button as relative */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    /* the transition goes in the initial state */
    transition: all .4s; }
  .btn--animated {
    /* the last one is the delay */
    animation: moveInBottom .5s ease-out .5s;
    /* automatically apply the styles up to 0% before the animation starts, 
    otherwise the button will be in place before it gets animated,
    so the 0% styles get applied before the animation starts
    */
    animation-fill-mode: backwards; }

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* image becomes the width of the element */
  background-size: cover;
  /* as we change the width, the bottom of the image gets cropped but not the top */
  background-position: top;
  position: relative;
  /* For harder shapes: https://bennettfeely.com/clippy/ */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }
  .header__logo-box {
    position: absolute;
    /* reference is the parent element, so the parent needs to be positioned as relative */
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* the button is an inline element, so it will be moved to the center */
    text-align: center; }

/* .logo:hover {
  animation: moveInRight 1s ease-out;
} */
.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
